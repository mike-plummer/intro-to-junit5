group 'com.objectpartners.plummer'
version '0.1-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    junitXmlToHtml
}

junitPlatform {

}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-parent:${springbootVersion}"
    compile "org.springframework.boot:spring-boot-starter-web"

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    // JUnit Jupiter API
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    // TestEngine implementations (only needed at runtime)
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")    //JUnit5
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")    //JUnit4

    testCompile("com.github.sbrannen:spring-test-junit5:${junit5SpringExtensionVersion}")

    junitXmlToHtml "org.apache.ant:ant-junit:${junitAntVersion}"
}

// To run: gradle junitPlatformTest junitPlatformJacocoReport
project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    junitPlatformTestTask.doLast {
        convertJunitXmlToHtml(file('build/test-results/junit-platform'))
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceDirectories = files("./src/main")
                classDirectories = files("$buildDir/classes/main")
                executionData junitPlatformTestTask

                reports {
                    xml.enabled false
                    csv.enabled false
                    html.enabled = true
                    html.destination "${buildDir}/jacocoHtml"
                }
            })
}

def convertJunitXmlToHtml(resultsDir) {
    def targetDir = new File(resultsDir, 'html')

    ant.taskdef(
            name: 'junitreport',
            classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
            classpath: configurations.junitXmlToHtml.asPath
    )

    ant.junitreport(todir: resultsDir) {
        fileset(dir: resultsDir, includes: 'TEST-*.xml')
        report(todir: targetDir, format: 'frames')
    }
}
